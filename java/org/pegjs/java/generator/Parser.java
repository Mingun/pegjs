package org.pegjs.java.generator;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;
import org.pegjs.java.AbstractParser;
import org.pegjs.java.Error;
import org.pegjs.java.annotations.Rule;
import org.pegjs.java.annotations.Grammar;
import org.pegjs.java.exceptions.PEGException;
//<editor-fold defaultstate="collapsed" desc="Код инициализатора">

  //var utils = require("./utils");
import org.pegjs.java.ast.*;
import org.pegjs.java.exceptions.SyntaxError;
import java.util.List;

//</editor-fold>
/**
 * Generated by PEG.js 0.8.0.
 *
 * http://pegjs.majda.cz/
 */
@Grammar
public class Parser extends AbstractParser {

    //<editor-fold defaultstate="collapsed" desc="Таблица констант парсера">
    private static final Object peg$c0 = peg$FAILED;
    private static final Object peg$c1 = null;
    private static final ArrayList peg$c2 = new ArrayList();
    private static final Object peg$c3 = null;
    private static final Error peg$c4 = new Error("other", null, "action");
    private static final String peg$c5 = "{";
    private static final Error peg$c6 = new Error("literal", "{", "\"{\"");
    private static final String peg$c7 = "}";
    private static final Error peg$c8 = new Error("literal", "}", "\"}\"");
    private static final Pattern peg$c9 = Pattern.compile("^[^{}]");
    private static final Error peg$c10 = new Error("class", "[^{}]", "[^{}]");
    private static final String peg$c11 = "=";
    private static final Error peg$c12 = new Error("literal", "=", "\"=\"");
    private static final String peg$c13 = ":";
    private static final Error peg$c14 = new Error("literal", ":", "\":\"");
    private static final String peg$c15 = ";";
    private static final Error peg$c16 = new Error("literal", ";", "\";\"");
    private static final String peg$c17 = "/";
    private static final Error peg$c18 = new Error("literal", "/", "\"/\"");
    private static final String peg$c19 = "&";
    private static final Error peg$c20 = new Error("literal", "&", "\"&\"");
    private static final String peg$c21 = "!";
    private static final Error peg$c22 = new Error("literal", "!", "\"!\"");
    private static final String peg$c23 = "$";
    private static final Error peg$c24 = new Error("literal", "$", "\"$\"");
    private static final String peg$c25 = "?";
    private static final Error peg$c26 = new Error("literal", "?", "\"?\"");
    private static final String peg$c27 = "*";
    private static final Error peg$c28 = new Error("literal", "*", "\"*\"");
    private static final String peg$c29 = "+";
    private static final Error peg$c30 = new Error("literal", "+", "\"+\"");
    private static final String peg$c31 = "(";
    private static final Error peg$c32 = new Error("literal", "(", "\"(\"");
    private static final String peg$c33 = ")";
    private static final Error peg$c34 = new Error("literal", ")", "\")\"");
    private static final String peg$c35 = ".";
    private static final Error peg$c36 = new Error("literal", ".", "\".\"");
    private static final String peg$c37 = ",";
    private static final Error peg$c38 = new Error("literal", ",", "\",\"");
    private static final String peg$c39 = "..";
    private static final Error peg$c40 = new Error("literal", "..", "\"..\"");
    private static final String peg$c41 = "|";
    private static final Error peg$c42 = new Error("literal", "|", "\"|\"");
    private static final Error peg$c43 = new Error("other", null, "identifier");
    private static final String peg$c44 = "_";
    private static final Error peg$c45 = new Error("literal", "_", "\"_\"");
    private static final Error peg$c46 = new Error("other", null, "literal");
    private static final String peg$c47 = "i";
    private static final Error peg$c48 = new Error("literal", "i", "\"i\"");
    private static final Error peg$c49 = new Error("other", null, "string");
    private static final String peg$c50 = "\"";
    private static final Error peg$c51 = new Error("literal", "\"", "\"\\\"\"");
    private static final String peg$c52 = "\\";
    private static final Error peg$c53 = new Error("literal", "\\", "\"\\\\\"");
    private static final Error peg$c54 = new Error("any", null, "any character");
    private static final String peg$c55 = "'";
    private static final Error peg$c56 = new Error("literal", "'", "\"'\"");
    private static final Error peg$c57 = new Error("other", null, "character class");
    private static final String peg$c58 = "[";
    private static final Error peg$c59 = new Error("literal", "[", "\"[\"");
    private static final String peg$c60 = "^";
    private static final Error peg$c61 = new Error("literal", "^", "\"^\"");
    private static final String peg$c62 = "]";
    private static final Error peg$c63 = new Error("literal", "]", "\"]\"");
    private static final String peg$c64 = "-";
    private static final Error peg$c65 = new Error("literal", "-", "\"-\"");
    private static final String peg$c66 = "x";
    private static final Error peg$c67 = new Error("literal", "x", "\"x\"");
    private static final String peg$c68 = "u";
    private static final Error peg$c69 = new Error("literal", "u", "\"u\"");
    private static final String peg$c70 = "\\0";
    private static final Error peg$c71 = new Error("literal", "\\0", "\"\\\\0\"");
    private static final String peg$c72 = "\\x";
    private static final Error peg$c73 = new Error("literal", "\\x", "\"\\\\x\"");
    private static final String peg$c74 = "\\u";
    private static final Error peg$c75 = new Error("literal", "\\u", "\"\\\\u\"");
    private static final Pattern peg$c76 = Pattern.compile("^[0-9]");
    private static final Error peg$c77 = new Error("class", "[0-9]", "[0-9]");
    private static final Pattern peg$c78 = Pattern.compile("^[0-9a-fA-F]");
    private static final Error peg$c79 = new Error("class", "[0-9a-fA-F]", "[0-9a-fA-F]");
    private static final Pattern peg$c80 = Pattern.compile("^[a-z]");
    private static final Error peg$c81 = new Error("class", "[a-z]", "[a-z]");
    private static final Pattern peg$c82 = Pattern.compile("^[A-Z]");
    private static final Error peg$c83 = new Error("class", "[A-Z]", "[A-Z]");
    private static final Error peg$c84 = new Error("other", null, "comment");
    private static final String peg$c85 = "//";
    private static final Error peg$c86 = new Error("literal", "//", "\"//\"");
    private static final String peg$c87 = "/*";
    private static final Error peg$c88 = new Error("literal", "/*", "\"/*\"");
    private static final String peg$c89 = "*/";
    private static final Error peg$c90 = new Error("literal", "*/", "\"*/\"");
    private static final Error peg$c91 = new Error("other", null, "end of line");
    private static final String peg$c92 = "\n";
    private static final Error peg$c93 = new Error("literal", "\n", "\"\\n\"");
    private static final String peg$c94 = "\r\n";
    private static final Error peg$c95 = new Error("literal", "\r\n", "\"\\r\\n\"");
    private static final String peg$c96 = "\r";
    private static final Error peg$c97 = new Error("literal", "\r", "\"\\r\"");
    private static final String peg$c98 = "\u2028";
    private static final Error peg$c99 = new Error("literal", "\u2028", "\"\\u2028\"");
    private static final String peg$c100 = "\u2029";
    private static final Error peg$c101 = new Error("literal", "\u2029", "\"\\u2029\"");
    private static final Pattern peg$c102 = Pattern.compile("^[\n\r\u2028\u2029]");
    private static final Error peg$c103 = new Error("class", "[\\n\\r\\u2028\\u2029]", "[\\n\\r\\u2028\\u2029]");
    private static final Error peg$c104 = new Error("other", null, "whitespace");
    private static final Pattern peg$c105 = Pattern.compile("^[ \t\u000B\f\u00A0\uFEFF\u1680\u180E\u2000-\u200A\u202F\u205F\u3000]");
    private static final Error peg$c106 = new Error("class", "[ \\t\\u000B\\f\\u00A0\\uFEFF\\u1680\\u180E\\u2000-\\u200A\\u202F\\u205F\\u3000]", "[ \\t\\u000B\\f\\u00A0\\uFEFF\\u1680\\u180E\\u2000-\\u200A\\u202F\\u205F\\u3000]");
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Таблица действий парсера">
    private Object peg$f0(Object initializer, Object rules) {
          return new GrammarNode(initializer, rules);
        }
    private Object peg$f1(Object code) {
          return code;
        }
    private Object peg$f2(Object name, Object displayName, Object expression) {
          return new RuleNode(name, displayName, expression);
        }
    private Object peg$f3(Object head, Object tail) {
          final List<List<Node>> t = (List<List<Node>>)tail;
          if (!t.isEmpty()) {
            return new ChoiceNode(head, t);
          } else {
            return head;
          }
        }
    private Object peg$f4(Object elements, Object code) {
          final List<Node> list = (List<Node>)elements;
          final Node expression = list.size() == 1 ? list.get(0) : new SequenceNode(list);
          return new ActionNode(code, expression);
        }
    private Object peg$f5(Object elements) {
          final List<Node> list = (List<Node>)elements;
          return list.size() == 1 ? list.get(0) : new SequenceNode(list);
        }
    private Object peg$f6(Object label, Object expression) {
          return new LabeledNode(label, expression);
        }
    private Object peg$f7(Object expression) {
          return new TextNode(expression);
        }
    private Object peg$f8(Object code) {
          return new SemanticAndNode(code);
        }
    private Object peg$f9(Object expression) {
          return new SimpleAndNode(expression);
        }
    private Object peg$f10(Object code) {
          return new SemanticNotNode(code);
        }
    private Object peg$f11(Object expression) {
          return new SimpleNotNode(expression);
        }
    private Object peg$f12(Object expression) {
          return new OptionalNode(expression);
        }
    private Object peg$f13(Object expression) {
          return new ZeroOrMoreNode(expression);
        }
    private Object peg$f14(Object expression) {
          return new OneOrMoreNode(expression);
        }
    private Object peg$f15(Object expression, Object r) {
          final Object[] rr = (Object[])r;
          final Number min = (Number)rr[0];
          final Number max = (Number)rr[1];
          final Object delimiter = rr[2];

          if (delimiter == null) {
            if (max == null) {// unbounded
              if (min.intValue() == 0) {// [0; +Inf]
                return new ZeroOrMoreNode(expression);
              } else
              if (min.intValue() == 1) {// [1; +Inf]
                return new OneOrMoreNode(expression);
              }
            } else
            if (max.intValue() == 1) {  // [?; 1]
              if (min.intValue() == 0) {// [0; 1]
                return new OptionalNode(expression);
              } else
              if (min.intValue() == 1) {// [1; 1]
                return expression;
              }
            }
          }
          return new RangeNode(min, max, delimiter, expression);
        }
    private Object peg$f16(Object name) {
          return new RuleRefNode(name);
        }
    private Object peg$f17() { return new AnyNode(); }
    private Object peg$f18(Object expression) { return expression; }
    private Object peg$f19(Object r, Object delimiter) {
        final Object[] rr = (Object[])r;
        rr[2] = "".equals(delimiter) ? null : ((List)delimiter).get(1);
        return r;
      }
    private Object peg$f20(Object min, Object max) {
        return new Object[]{"".equals(min)?0:min, "".equals(max)?null:max, null};
      }
    private Object peg$f21(Object val) {return new Object[]{val, val, null};}
    private Object peg$f22(Object n) {return n.toString().isEmpty() ? "" : Integer.valueOf(n.toString(), 10);}
    private Object peg$f23(Object braced) {
        final CharSequence seq = (CharSequence)braced;
        return new Code(seq.subSequence(1, seq.length() - 1));
      }
    private Object peg$f24() { return "="; }
    private Object peg$f25() { return ":"; }
    private Object peg$f26() { return ";"; }
    private Object peg$f27() { return "/"; }
    private Object peg$f28() { return "&"; }
    private Object peg$f29() { return "!"; }
    private Object peg$f30() { return "$"; }
    private Object peg$f31() { return "?"; }
    private Object peg$f32() { return "*"; }
    private Object peg$f33() { return "+"; }
    private Object peg$f34() { return "("; }
    private Object peg$f35() { return ")"; }
    private Object peg$f36() { return "."; }
    private Object peg$f37() { return ","; }
    private Object peg$f38() { return ".."; }
    private Object peg$f39() { return "|"; }
    private Object peg$f40(Object chars) { return chars; }
    private Object peg$f41(Object value, Object flags) {
          return new LiteralNode(value.toString(), "i".equals(flags));
        }
    private Object peg$f42(Object string) { return string; }
    private Object peg$f43(Object chars) { return join((List)chars); }
    private Object peg$f44(Object char_) { return char_; }
    private Object peg$f45(Object inverted, Object parts, Object flags) {
          // FIXME: Get the raw text from the input directly.
          return new ClassNode(parts, inverted, flags);
        }
    private Object peg$f46(Object begin, Object end) {
          // FIXME: Get the raw text from the input directly.
          return new ClassNode.CharacterClass(begin, end);
        }
    private Object peg$f47(Object char_) {
          // FIXME: Get the raw text from the input directly.
          return new ClassNode.CharacterClass(char_);
        }
    private Object peg$f48(Object char_) {
          return char_.toString()
            .replace("b", "\b")
            .replace("f", "\f")
            .replace("n", "\n")
            .replace("r", "\r")
            .replace("t", "\t")
            .replace("v", "\u000B");
        }
    private Object peg$f49() { return "\u0000"; }
    private Object peg$f50(Object digits) {
          return new String(new int[]{Integer.parseInt(digits.toString(), 16)}, 0, 1);
        }
    private Object peg$f51(Object eol) { return eol; }
    //</editor-fold>

    public Parser() {
        super(
        //<editor-fold defaultstate="collapsed" desc="Список правил, с которых возможно начало разбора">
            "grammar",
            "class"
        //</editor-fold>
        );
    }
    @Override
    public Object parse(CharSequence input, String startRule) {
        return this.parse(input, startRule, "grammar");
    }
    //<editor-fold defaultstate="collapsed" desc="Вспомогательные функции">
    // Объявляем в текущем классе, т.к. вызов private методов разбора правил,
    // объявленных в данном классе, из AbstractParser невозможен.
    @Override
    protected final Object callRule(String ruleName) {
        try {
            final Method m = this.getClass().getDeclaredMethod(ruleName, (Class[]) null);
            if (!m.isAnnotationPresent(Rule.class)) {
                throw new PEGException(ruleName+" not rule name");
            }
            return m.invoke(this, (Object[]) null);
        } catch (IllegalAccessException ex) {
            throw new PEGException(ex);
        } catch (IllegalArgumentException ex) {
            throw new PEGException(ex);
        } catch (InvocationTargetException ex) {
            throw new PEGException(ex);
        } catch (NoSuchMethodException ex) {
            throw new PEGException(ex);
        } catch (SecurityException ex) {
            throw new PEGException(ex);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Функции разбора правил">
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parsegrammar() {
        Object s0, s1, s2, s3, s4;

        s0 = this.peg$currPos;
        s1 = this.peg$parse__();
        if (s1 != peg$FAILED) {
            s2 = this.peg$parseinitializer();
            if (s2 == peg$FAILED) {
                s2 = Parser.peg$c1;
            }
            if (s2 != peg$FAILED) {
                s3 = new ArrayList();
                s4 = this.peg$parserule();
                if (s4 != peg$FAILED) {
                    while (s4 != peg$FAILED) {
                        ((List)s3).add(s4);
                        s4 = this.peg$parserule();
                    }
                } else {
                    s3 = Parser.peg$c0;
                }
                if (s3 != peg$FAILED) {
                    this.peg$reportedPos = ((Number)s0).intValue();
                    s1 = peg$f0(s2, s3);
                    s0 = s1;
                } else {
                    this.peg$currPos = ((Number)s0).intValue();
                    s0 = Parser.peg$c0;
                }
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s0).intValue();
            s0 = Parser.peg$c0;
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parseinitializer() {
        Object s0, s1, s2;

        s0 = this.peg$currPos;
        s1 = this.peg$parseaction();
        if (s1 != peg$FAILED) {
            s2 = this.peg$parsesemicolon();
            if (s2 == peg$FAILED) {
                s2 = Parser.peg$c1;
            }
            if (s2 != peg$FAILED) {
                this.peg$reportedPos = ((Number)s0).intValue();
                s1 = peg$f1(s1);
                s0 = s1;
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s0).intValue();
            s0 = Parser.peg$c0;
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parserule() {
        Object s0, s1, s2, s3, s4, s5;

        s0 = this.peg$currPos;
        s1 = this.peg$parseidentifier();
        if (s1 != peg$FAILED) {
            s2 = this.peg$parsestring();
            if (s2 == peg$FAILED) {
                s2 = Parser.peg$c1;
            }
            if (s2 != peg$FAILED) {
                s3 = this.peg$parseequals();
                if (s3 != peg$FAILED) {
                    s4 = this.peg$parsechoice();
                    if (s4 != peg$FAILED) {
                        s5 = this.peg$parsesemicolon();
                        if (s5 == peg$FAILED) {
                            s5 = Parser.peg$c1;
                        }
                        if (s5 != peg$FAILED) {
                            this.peg$reportedPos = ((Number)s0).intValue();
                            s1 = peg$f2(s1, s2, s4);
                            s0 = s1;
                        } else {
                            this.peg$currPos = ((Number)s0).intValue();
                            s0 = Parser.peg$c0;
                        }
                    } else {
                        this.peg$currPos = ((Number)s0).intValue();
                        s0 = Parser.peg$c0;
                    }
                } else {
                    this.peg$currPos = ((Number)s0).intValue();
                    s0 = Parser.peg$c0;
                }
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s0).intValue();
            s0 = Parser.peg$c0;
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parsechoice() {
        Object s0, s1, s2, s3, s4, s5;

        s0 = this.peg$currPos;
        s1 = this.peg$parsesequence();
        if (s1 != peg$FAILED) {
            s2 = new ArrayList();
            s3 = this.peg$currPos;
            s4 = this.peg$parseslash();
            if (s4 != peg$FAILED) {
                s5 = this.peg$parsesequence();
                if (s5 != peg$FAILED) {
                    s4 = Arrays.asList(s4, s5);
                    s3 = s4;
                } else {
                    this.peg$currPos = ((Number)s3).intValue();
                    s3 = Parser.peg$c0;
                }
            } else {
                this.peg$currPos = ((Number)s3).intValue();
                s3 = Parser.peg$c0;
            }
            while (s3 != peg$FAILED) {
                ((List)s2).add(s3);
                s3 = this.peg$currPos;
                s4 = this.peg$parseslash();
                if (s4 != peg$FAILED) {
                    s5 = this.peg$parsesequence();
                    if (s5 != peg$FAILED) {
                        s4 = Arrays.asList(s4, s5);
                        s3 = s4;
                    } else {
                        this.peg$currPos = ((Number)s3).intValue();
                        s3 = Parser.peg$c0;
                    }
                } else {
                    this.peg$currPos = ((Number)s3).intValue();
                    s3 = Parser.peg$c0;
                }
            }
            if (s2 != peg$FAILED) {
                this.peg$reportedPos = ((Number)s0).intValue();
                s1 = peg$f3(s1, s2);
                s0 = s1;
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s0).intValue();
            s0 = Parser.peg$c0;
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parsesequence() {
        Object s0, s1, s2;

        s0 = this.peg$currPos;
        s1 = new ArrayList();
        s2 = this.peg$parselabeled();
        while (s2 != peg$FAILED) {
            ((List)s1).add(s2);
            s2 = this.peg$parselabeled();
        }
        if (s1 != peg$FAILED) {
            s2 = this.peg$parseaction();
            if (s2 != peg$FAILED) {
                this.peg$reportedPos = ((Number)s0).intValue();
                s1 = peg$f4(s1, s2);
                s0 = s1;
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s0).intValue();
            s0 = Parser.peg$c0;
        }
        if (s0 == peg$FAILED) {
            s0 = this.peg$currPos;
            s1 = new ArrayList();
            s2 = this.peg$parselabeled();
            while (s2 != peg$FAILED) {
                ((List)s1).add(s2);
                s2 = this.peg$parselabeled();
            }
            if (s1 != peg$FAILED) {
                this.peg$reportedPos = ((Number)s0).intValue();
                s1 = peg$f5(s1);
            }
            s0 = s1;
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parselabeled() {
        Object s0, s1, s2, s3;

        s0 = this.peg$currPos;
        s1 = this.peg$parseidentifier();
        if (s1 != peg$FAILED) {
            s2 = this.peg$parsecolon();
            if (s2 != peg$FAILED) {
                s3 = this.peg$parseprefixed();
                if (s3 != peg$FAILED) {
                    this.peg$reportedPos = ((Number)s0).intValue();
                    s1 = peg$f6(s1, s3);
                    s0 = s1;
                } else {
                    this.peg$currPos = ((Number)s0).intValue();
                    s0 = Parser.peg$c0;
                }
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s0).intValue();
            s0 = Parser.peg$c0;
        }
        if (s0 == peg$FAILED) {
            s0 = this.peg$parseprefixed();
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parseprefixed() {
        Object s0, s1, s2;

        s0 = this.peg$currPos;
        s1 = this.peg$parsedollar();
        if (s1 != peg$FAILED) {
            s2 = this.peg$parsesuffixed();
            if (s2 != peg$FAILED) {
                this.peg$reportedPos = ((Number)s0).intValue();
                s1 = peg$f7(s2);
                s0 = s1;
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s0).intValue();
            s0 = Parser.peg$c0;
        }
        if (s0 == peg$FAILED) {
            s0 = this.peg$currPos;
            s1 = this.peg$parseand();
            if (s1 != peg$FAILED) {
                s2 = this.peg$parseaction();
                if (s2 != peg$FAILED) {
                    this.peg$reportedPos = ((Number)s0).intValue();
                    s1 = peg$f8(s2);
                    s0 = s1;
                } else {
                    this.peg$currPos = ((Number)s0).intValue();
                    s0 = Parser.peg$c0;
                }
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
            if (s0 == peg$FAILED) {
                s0 = this.peg$currPos;
                s1 = this.peg$parseand();
                if (s1 != peg$FAILED) {
                    s2 = this.peg$parsesuffixed();
                    if (s2 != peg$FAILED) {
                        this.peg$reportedPos = ((Number)s0).intValue();
                        s1 = peg$f9(s2);
                        s0 = s1;
                    } else {
                        this.peg$currPos = ((Number)s0).intValue();
                        s0 = Parser.peg$c0;
                    }
                } else {
                    this.peg$currPos = ((Number)s0).intValue();
                    s0 = Parser.peg$c0;
                }
                if (s0 == peg$FAILED) {
                    s0 = this.peg$currPos;
                    s1 = this.peg$parsenot();
                    if (s1 != peg$FAILED) {
                        s2 = this.peg$parseaction();
                        if (s2 != peg$FAILED) {
                            this.peg$reportedPos = ((Number)s0).intValue();
                            s1 = peg$f10(s2);
                            s0 = s1;
                        } else {
                            this.peg$currPos = ((Number)s0).intValue();
                            s0 = Parser.peg$c0;
                        }
                    } else {
                        this.peg$currPos = ((Number)s0).intValue();
                        s0 = Parser.peg$c0;
                    }
                    if (s0 == peg$FAILED) {
                        s0 = this.peg$currPos;
                        s1 = this.peg$parsenot();
                        if (s1 != peg$FAILED) {
                            s2 = this.peg$parsesuffixed();
                            if (s2 != peg$FAILED) {
                                this.peg$reportedPos = ((Number)s0).intValue();
                                s1 = peg$f11(s2);
                                s0 = s1;
                            } else {
                                this.peg$currPos = ((Number)s0).intValue();
                                s0 = Parser.peg$c0;
                            }
                        } else {
                            this.peg$currPos = ((Number)s0).intValue();
                            s0 = Parser.peg$c0;
                        }
                        if (s0 == peg$FAILED) {
                            s0 = this.peg$parsesuffixed();
                        }
                    }
                }
            }
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parsesuffixed() {
        Object s0, s1, s2;

        s0 = this.peg$currPos;
        s1 = this.peg$parseprimary();
        if (s1 != peg$FAILED) {
            s2 = this.peg$parsequestion();
            if (s2 != peg$FAILED) {
                this.peg$reportedPos = ((Number)s0).intValue();
                s1 = peg$f12(s1);
                s0 = s1;
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s0).intValue();
            s0 = Parser.peg$c0;
        }
        if (s0 == peg$FAILED) {
            s0 = this.peg$currPos;
            s1 = this.peg$parseprimary();
            if (s1 != peg$FAILED) {
                s2 = this.peg$parsestar();
                if (s2 != peg$FAILED) {
                    this.peg$reportedPos = ((Number)s0).intValue();
                    s1 = peg$f13(s1);
                    s0 = s1;
                } else {
                    this.peg$currPos = ((Number)s0).intValue();
                    s0 = Parser.peg$c0;
                }
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
            if (s0 == peg$FAILED) {
                s0 = this.peg$currPos;
                s1 = this.peg$parseprimary();
                if (s1 != peg$FAILED) {
                    s2 = this.peg$parseplus();
                    if (s2 != peg$FAILED) {
                        this.peg$reportedPos = ((Number)s0).intValue();
                        s1 = peg$f14(s1);
                        s0 = s1;
                    } else {
                        this.peg$currPos = ((Number)s0).intValue();
                        s0 = Parser.peg$c0;
                    }
                } else {
                    this.peg$currPos = ((Number)s0).intValue();
                    s0 = Parser.peg$c0;
                }
                if (s0 == peg$FAILED) {
                    s0 = this.peg$currPos;
                    s1 = this.peg$parseprimary();
                    if (s1 != peg$FAILED) {
                        s2 = this.peg$parserange();
                        if (s2 != peg$FAILED) {
                            this.peg$reportedPos = ((Number)s0).intValue();
                            s1 = peg$f15(s1, s2);
                            s0 = s1;
                        } else {
                            this.peg$currPos = ((Number)s0).intValue();
                            s0 = Parser.peg$c0;
                        }
                    } else {
                        this.peg$currPos = ((Number)s0).intValue();
                        s0 = Parser.peg$c0;
                    }
                    if (s0 == peg$FAILED) {
                        s0 = this.peg$parseprimary();
                    }
                }
            }
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parseprimary() {
        Object s0, s1, s2, s3, s4, s5;

        s0 = this.peg$currPos;
        s1 = this.peg$parseidentifier();
        if (s1 != peg$FAILED) {
            s2 = this.peg$currPos;
            ++this.peg$silentFails;
            s3 = this.peg$currPos;
            s4 = this.peg$parsestring();
            if (s4 == peg$FAILED) {
                s4 = Parser.peg$c1;
            }
            if (s4 != peg$FAILED) {
                s5 = this.peg$parseequals();
                if (s5 != peg$FAILED) {
                    s4 = Arrays.asList(s4, s5);
                    s3 = s4;
                } else {
                    this.peg$currPos = ((Number)s3).intValue();
                    s3 = Parser.peg$c0;
                }
            } else {
                this.peg$currPos = ((Number)s3).intValue();
                s3 = Parser.peg$c0;
            }
            --this.peg$silentFails;
            if (s3 == peg$FAILED) {
                s2 = Parser.peg$c3;
            } else {
                this.peg$currPos = ((Number)s2).intValue();
                s2 = Parser.peg$c0;
            }
            if (s2 != peg$FAILED) {
                this.peg$reportedPos = ((Number)s0).intValue();
                s1 = peg$f16(s1);
                s0 = s1;
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s0).intValue();
            s0 = Parser.peg$c0;
        }
        if (s0 == peg$FAILED) {
            s0 = this.peg$parseliteral();
            if (s0 == peg$FAILED) {
                s0 = this.peg$parseclass();
                if (s0 == peg$FAILED) {
                    s0 = this.peg$currPos;
                    s1 = this.peg$parsedot();
                    if (s1 != peg$FAILED) {
                        this.peg$reportedPos = ((Number)s0).intValue();
                        s1 = peg$f17();
                    }
                    s0 = s1;
                    if (s0 == peg$FAILED) {
                        s0 = this.peg$currPos;
                        s1 = this.peg$parselparen();
                        if (s1 != peg$FAILED) {
                            s2 = this.peg$parsechoice();
                            if (s2 != peg$FAILED) {
                                s3 = this.peg$parserparen();
                                if (s3 != peg$FAILED) {
                                    this.peg$reportedPos = ((Number)s0).intValue();
                                    s1 = peg$f18(s2);
                                    s0 = s1;
                                } else {
                                    this.peg$currPos = ((Number)s0).intValue();
                                    s0 = Parser.peg$c0;
                                }
                            } else {
                                this.peg$currPos = ((Number)s0).intValue();
                                s0 = Parser.peg$c0;
                            }
                        } else {
                            this.peg$currPos = ((Number)s0).intValue();
                            s0 = Parser.peg$c0;
                        }
                    }
                }
            }
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parserange() {
        Object s0, s1, s2, s3, s4, s5;

        s0 = this.peg$currPos;
        s1 = this.peg$parserange_open();
        if (s1 != peg$FAILED) {
            s2 = this.peg$parserange2();
            if (s2 != peg$FAILED) {
                s3 = this.peg$currPos;
                s4 = this.peg$parsecomma();
                if (s4 != peg$FAILED) {
                    s5 = this.peg$parseprimary();
                    if (s5 != peg$FAILED) {
                        s4 = Arrays.asList(s4, s5);
                        s3 = s4;
                    } else {
                        this.peg$currPos = ((Number)s3).intValue();
                        s3 = Parser.peg$c0;
                    }
                } else {
                    this.peg$currPos = ((Number)s3).intValue();
                    s3 = Parser.peg$c0;
                }
                if (s3 == peg$FAILED) {
                    s3 = Parser.peg$c1;
                }
                if (s3 != peg$FAILED) {
                    s4 = this.peg$parserange_close();
                    if (s4 != peg$FAILED) {
                        this.peg$reportedPos = ((Number)s0).intValue();
                        s1 = peg$f19(s2, s3);
                        s0 = s1;
                    } else {
                        this.peg$currPos = ((Number)s0).intValue();
                        s0 = Parser.peg$c0;
                    }
                } else {
                    this.peg$currPos = ((Number)s0).intValue();
                    s0 = Parser.peg$c0;
                }
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s0).intValue();
            s0 = Parser.peg$c0;
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parserange2() {
        Object s0, s1, s2, s3;

        s0 = this.peg$currPos;
        s1 = this.peg$parseint();
        if (s1 == peg$FAILED) {
            s1 = Parser.peg$c1;
        }
        if (s1 != peg$FAILED) {
            s2 = this.peg$parsedots();
            if (s2 != peg$FAILED) {
                s3 = this.peg$parseint();
                if (s3 == peg$FAILED) {
                    s3 = Parser.peg$c1;
                }
                if (s3 != peg$FAILED) {
                    this.peg$reportedPos = ((Number)s0).intValue();
                    s1 = peg$f20(s1, s3);
                    s0 = s1;
                } else {
                    this.peg$currPos = ((Number)s0).intValue();
                    s0 = Parser.peg$c0;
                }
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s0).intValue();
            s0 = Parser.peg$c0;
        }
        if (s0 == peg$FAILED) {
            s0 = this.peg$currPos;
            s1 = this.peg$parseint();
            if (s1 != peg$FAILED) {
                this.peg$reportedPos = ((Number)s0).intValue();
                s1 = peg$f21(s1);
            }
            s0 = s1;
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parseint() {
        Object s0, s1, s2, s3;

        s0 = this.peg$currPos;
        s1 = this.peg$currPos;
        s2 = new ArrayList();
        s3 = this.peg$parsedigit();
        if (s3 != peg$FAILED) {
            while (s3 != peg$FAILED) {
                ((List)s2).add(s3);
                s3 = this.peg$parsedigit();
            }
        } else {
            s2 = Parser.peg$c0;
        }
        if (s2 != peg$FAILED) {
            s2 = this.input.subSequence(((Number)s1).intValue(), this.peg$currPos);
        }
        s1 = s2;
        if (s1 != peg$FAILED) {
            s2 = this.peg$parse__();
            if (s2 != peg$FAILED) {
                this.peg$reportedPos = ((Number)s0).intValue();
                s1 = peg$f22(s1);
                s0 = s1;
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s0).intValue();
            s0 = Parser.peg$c0;
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parseaction() {
        Object s0, s1, s2;

        ++this.peg$silentFails;
        s0 = this.peg$currPos;
        s1 = this.peg$parsebraced();
        if (s1 != peg$FAILED) {
            s2 = this.peg$parse__();
            if (s2 != peg$FAILED) {
                this.peg$reportedPos = ((Number)s0).intValue();
                s1 = peg$f23(s1);
                s0 = s1;
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s0).intValue();
            s0 = Parser.peg$c0;
        }
        --this.peg$silentFails;
        if (s0 == peg$FAILED) {
            s1 = peg$FAILED;
            this.peg$mayBeFail(Parser.peg$c4);
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parsebraced() {
        Object s0, s1, s2, s3, s4;

        s0 = this.peg$currPos;
        s1 = this.peg$currPos;
        if (this.test((char)123/* "{" */)) {
            s2 = Parser.peg$c5;
            ++this.peg$currPos;
        } else {
            s2 = peg$FAILED;
            this.peg$mayBeFail(Parser.peg$c6);
        }
        if (s2 != peg$FAILED) {
            s3 = new ArrayList();
            s4 = this.peg$parsebraced();
            if (s4 == peg$FAILED) {
                s4 = this.peg$parsenonBraceCharacters();
            }
            while (s4 != peg$FAILED) {
                ((List)s3).add(s4);
                s4 = this.peg$parsebraced();
                if (s4 == peg$FAILED) {
                    s4 = this.peg$parsenonBraceCharacters();
                }
            }
            if (s3 != peg$FAILED) {
                if (this.test((char)125/* "}" */)) {
                    s4 = Parser.peg$c7;
                    ++this.peg$currPos;
                } else {
                    s4 = peg$FAILED;
                    this.peg$mayBeFail(Parser.peg$c8);
                }
                if (s4 != peg$FAILED) {
                    s2 = Arrays.asList(s2, s3, s4);
                    s1 = s2;
                } else {
                    this.peg$currPos = ((Number)s1).intValue();
                    s1 = Parser.peg$c0;
                }
            } else {
                this.peg$currPos = ((Number)s1).intValue();
                s1 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s1).intValue();
            s1 = Parser.peg$c0;
        }
        if (s1 != peg$FAILED) {
            s1 = this.input.subSequence(((Number)s0).intValue(), this.peg$currPos);
        }
        s0 = s1;

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parsenonBraceCharacters() {
        Object s0, s1;

        s0 = new ArrayList();
        s1 = this.peg$parsenonBraceCharacter();
        if (s1 != peg$FAILED) {
            while (s1 != peg$FAILED) {
                ((List)s0).add(s1);
                s1 = this.peg$parsenonBraceCharacter();
            }
        } else {
            s0 = Parser.peg$c0;
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parsenonBraceCharacter() {
        Object s0;

        if (this.test(Parser.peg$c9)) {
            s0 = this.input.charAt(this.peg$currPos);
            ++this.peg$currPos;
        } else {
            s0 = peg$FAILED;
            this.peg$mayBeFail(Parser.peg$c10);
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parseequals() {
        Object s0, s1, s2;

        s0 = this.peg$currPos;
        if (this.test((char)61/* "=" */)) {
            s1 = Parser.peg$c11;
            ++this.peg$currPos;
        } else {
            s1 = peg$FAILED;
            this.peg$mayBeFail(Parser.peg$c12);
        }
        if (s1 != peg$FAILED) {
            s2 = this.peg$parse__();
            if (s2 != peg$FAILED) {
                this.peg$reportedPos = ((Number)s0).intValue();
                s1 = peg$f24();
                s0 = s1;
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s0).intValue();
            s0 = Parser.peg$c0;
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parsecolon() {
        Object s0, s1, s2;

        s0 = this.peg$currPos;
        if (this.test((char)58/* ":" */)) {
            s1 = Parser.peg$c13;
            ++this.peg$currPos;
        } else {
            s1 = peg$FAILED;
            this.peg$mayBeFail(Parser.peg$c14);
        }
        if (s1 != peg$FAILED) {
            s2 = this.peg$parse__();
            if (s2 != peg$FAILED) {
                this.peg$reportedPos = ((Number)s0).intValue();
                s1 = peg$f25();
                s0 = s1;
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s0).intValue();
            s0 = Parser.peg$c0;
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parsesemicolon() {
        Object s0, s1, s2;

        s0 = this.peg$currPos;
        if (this.test((char)59/* ";" */)) {
            s1 = Parser.peg$c15;
            ++this.peg$currPos;
        } else {
            s1 = peg$FAILED;
            this.peg$mayBeFail(Parser.peg$c16);
        }
        if (s1 != peg$FAILED) {
            s2 = this.peg$parse__();
            if (s2 != peg$FAILED) {
                this.peg$reportedPos = ((Number)s0).intValue();
                s1 = peg$f26();
                s0 = s1;
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s0).intValue();
            s0 = Parser.peg$c0;
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parseslash() {
        Object s0, s1, s2;

        s0 = this.peg$currPos;
        if (this.test((char)47/* "/" */)) {
            s1 = Parser.peg$c17;
            ++this.peg$currPos;
        } else {
            s1 = peg$FAILED;
            this.peg$mayBeFail(Parser.peg$c18);
        }
        if (s1 != peg$FAILED) {
            s2 = this.peg$parse__();
            if (s2 != peg$FAILED) {
                this.peg$reportedPos = ((Number)s0).intValue();
                s1 = peg$f27();
                s0 = s1;
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s0).intValue();
            s0 = Parser.peg$c0;
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parseand() {
        Object s0, s1, s2;

        s0 = this.peg$currPos;
        if (this.test((char)38/* "&" */)) {
            s1 = Parser.peg$c19;
            ++this.peg$currPos;
        } else {
            s1 = peg$FAILED;
            this.peg$mayBeFail(Parser.peg$c20);
        }
        if (s1 != peg$FAILED) {
            s2 = this.peg$parse__();
            if (s2 != peg$FAILED) {
                this.peg$reportedPos = ((Number)s0).intValue();
                s1 = peg$f28();
                s0 = s1;
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s0).intValue();
            s0 = Parser.peg$c0;
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parsenot() {
        Object s0, s1, s2;

        s0 = this.peg$currPos;
        if (this.test((char)33/* "!" */)) {
            s1 = Parser.peg$c21;
            ++this.peg$currPos;
        } else {
            s1 = peg$FAILED;
            this.peg$mayBeFail(Parser.peg$c22);
        }
        if (s1 != peg$FAILED) {
            s2 = this.peg$parse__();
            if (s2 != peg$FAILED) {
                this.peg$reportedPos = ((Number)s0).intValue();
                s1 = peg$f29();
                s0 = s1;
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s0).intValue();
            s0 = Parser.peg$c0;
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parsedollar() {
        Object s0, s1, s2;

        s0 = this.peg$currPos;
        if (this.test((char)36/* "$" */)) {
            s1 = Parser.peg$c23;
            ++this.peg$currPos;
        } else {
            s1 = peg$FAILED;
            this.peg$mayBeFail(Parser.peg$c24);
        }
        if (s1 != peg$FAILED) {
            s2 = this.peg$parse__();
            if (s2 != peg$FAILED) {
                this.peg$reportedPos = ((Number)s0).intValue();
                s1 = peg$f30();
                s0 = s1;
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s0).intValue();
            s0 = Parser.peg$c0;
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parsequestion() {
        Object s0, s1, s2;

        s0 = this.peg$currPos;
        if (this.test((char)63/* "?" */)) {
            s1 = Parser.peg$c25;
            ++this.peg$currPos;
        } else {
            s1 = peg$FAILED;
            this.peg$mayBeFail(Parser.peg$c26);
        }
        if (s1 != peg$FAILED) {
            s2 = this.peg$parse__();
            if (s2 != peg$FAILED) {
                this.peg$reportedPos = ((Number)s0).intValue();
                s1 = peg$f31();
                s0 = s1;
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s0).intValue();
            s0 = Parser.peg$c0;
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parsestar() {
        Object s0, s1, s2;

        s0 = this.peg$currPos;
        if (this.test((char)42/* "*" */)) {
            s1 = Parser.peg$c27;
            ++this.peg$currPos;
        } else {
            s1 = peg$FAILED;
            this.peg$mayBeFail(Parser.peg$c28);
        }
        if (s1 != peg$FAILED) {
            s2 = this.peg$parse__();
            if (s2 != peg$FAILED) {
                this.peg$reportedPos = ((Number)s0).intValue();
                s1 = peg$f32();
                s0 = s1;
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s0).intValue();
            s0 = Parser.peg$c0;
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parseplus() {
        Object s0, s1, s2;

        s0 = this.peg$currPos;
        if (this.test((char)43/* "+" */)) {
            s1 = Parser.peg$c29;
            ++this.peg$currPos;
        } else {
            s1 = peg$FAILED;
            this.peg$mayBeFail(Parser.peg$c30);
        }
        if (s1 != peg$FAILED) {
            s2 = this.peg$parse__();
            if (s2 != peg$FAILED) {
                this.peg$reportedPos = ((Number)s0).intValue();
                s1 = peg$f33();
                s0 = s1;
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s0).intValue();
            s0 = Parser.peg$c0;
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parselparen() {
        Object s0, s1, s2;

        s0 = this.peg$currPos;
        if (this.test((char)40/* "(" */)) {
            s1 = Parser.peg$c31;
            ++this.peg$currPos;
        } else {
            s1 = peg$FAILED;
            this.peg$mayBeFail(Parser.peg$c32);
        }
        if (s1 != peg$FAILED) {
            s2 = this.peg$parse__();
            if (s2 != peg$FAILED) {
                this.peg$reportedPos = ((Number)s0).intValue();
                s1 = peg$f34();
                s0 = s1;
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s0).intValue();
            s0 = Parser.peg$c0;
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parserparen() {
        Object s0, s1, s2;

        s0 = this.peg$currPos;
        if (this.test((char)41/* ")" */)) {
            s1 = Parser.peg$c33;
            ++this.peg$currPos;
        } else {
            s1 = peg$FAILED;
            this.peg$mayBeFail(Parser.peg$c34);
        }
        if (s1 != peg$FAILED) {
            s2 = this.peg$parse__();
            if (s2 != peg$FAILED) {
                this.peg$reportedPos = ((Number)s0).intValue();
                s1 = peg$f35();
                s0 = s1;
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s0).intValue();
            s0 = Parser.peg$c0;
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parsedot() {
        Object s0, s1, s2;

        s0 = this.peg$currPos;
        if (this.test((char)46/* "." */)) {
            s1 = Parser.peg$c35;
            ++this.peg$currPos;
        } else {
            s1 = peg$FAILED;
            this.peg$mayBeFail(Parser.peg$c36);
        }
        if (s1 != peg$FAILED) {
            s2 = this.peg$parse__();
            if (s2 != peg$FAILED) {
                this.peg$reportedPos = ((Number)s0).intValue();
                s1 = peg$f36();
                s0 = s1;
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s0).intValue();
            s0 = Parser.peg$c0;
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parsecomma() {
        Object s0, s1, s2;

        s0 = this.peg$currPos;
        if (this.test((char)44/* "," */)) {
            s1 = Parser.peg$c37;
            ++this.peg$currPos;
        } else {
            s1 = peg$FAILED;
            this.peg$mayBeFail(Parser.peg$c38);
        }
        if (s1 != peg$FAILED) {
            s2 = this.peg$parse__();
            if (s2 != peg$FAILED) {
                this.peg$reportedPos = ((Number)s0).intValue();
                s1 = peg$f37();
                s0 = s1;
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s0).intValue();
            s0 = Parser.peg$c0;
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parsedots() {
        Object s0, s1, s2;

        s0 = this.peg$currPos;
        if (this.test(Parser.peg$c39)) {
            s1 = Parser.peg$c39;
            this.peg$currPos += 2;
        } else {
            s1 = peg$FAILED;
            this.peg$mayBeFail(Parser.peg$c40);
        }
        if (s1 != peg$FAILED) {
            s2 = this.peg$parse__();
            if (s2 != peg$FAILED) {
                this.peg$reportedPos = ((Number)s0).intValue();
                s1 = peg$f38();
                s0 = s1;
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s0).intValue();
            s0 = Parser.peg$c0;
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parserange_open() {
        Object s0, s1, s2;

        s0 = this.peg$currPos;
        if (this.test((char)124/* "|" */)) {
            s1 = Parser.peg$c41;
            ++this.peg$currPos;
        } else {
            s1 = peg$FAILED;
            this.peg$mayBeFail(Parser.peg$c42);
        }
        if (s1 != peg$FAILED) {
            s2 = this.peg$parse__();
            if (s2 != peg$FAILED) {
                this.peg$reportedPos = ((Number)s0).intValue();
                s1 = peg$f39();
                s0 = s1;
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s0).intValue();
            s0 = Parser.peg$c0;
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parserange_close() {
        Object s0, s1, s2;

        s0 = this.peg$currPos;
        if (this.test((char)124/* "|" */)) {
            s1 = Parser.peg$c41;
            ++this.peg$currPos;
        } else {
            s1 = peg$FAILED;
            this.peg$mayBeFail(Parser.peg$c42);
        }
        if (s1 != peg$FAILED) {
            s2 = this.peg$parse__();
            if (s2 != peg$FAILED) {
                this.peg$reportedPos = ((Number)s0).intValue();
                s1 = peg$f39();
                s0 = s1;
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s0).intValue();
            s0 = Parser.peg$c0;
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parseidentifier() {
        Object s0, s1, s2, s3, s4, s5;

        ++this.peg$silentFails;
        s0 = this.peg$currPos;
        s1 = this.peg$currPos;
        s2 = this.peg$currPos;
        s3 = this.peg$parseletter();
        if (s3 == peg$FAILED) {
            if (this.test((char)95/* "_" */)) {
                s3 = Parser.peg$c44;
                ++this.peg$currPos;
            } else {
                s3 = peg$FAILED;
                this.peg$mayBeFail(Parser.peg$c45);
            }
        }
        if (s3 != peg$FAILED) {
            s4 = new ArrayList();
            s5 = this.peg$parseletter();
            if (s5 == peg$FAILED) {
                s5 = this.peg$parsedigit();
                if (s5 == peg$FAILED) {
                    if (this.test((char)95/* "_" */)) {
                        s5 = Parser.peg$c44;
                        ++this.peg$currPos;
                    } else {
                        s5 = peg$FAILED;
                        this.peg$mayBeFail(Parser.peg$c45);
                    }
                }
            }
            while (s5 != peg$FAILED) {
                ((List)s4).add(s5);
                s5 = this.peg$parseletter();
                if (s5 == peg$FAILED) {
                    s5 = this.peg$parsedigit();
                    if (s5 == peg$FAILED) {
                        if (this.test((char)95/* "_" */)) {
                            s5 = Parser.peg$c44;
                            ++this.peg$currPos;
                        } else {
                            s5 = peg$FAILED;
                            this.peg$mayBeFail(Parser.peg$c45);
                        }
                    }
                }
            }
            if (s4 != peg$FAILED) {
                s3 = Arrays.asList(s3, s4);
                s2 = s3;
            } else {
                this.peg$currPos = ((Number)s2).intValue();
                s2 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s2).intValue();
            s2 = Parser.peg$c0;
        }
        if (s2 != peg$FAILED) {
            s2 = this.input.subSequence(((Number)s1).intValue(), this.peg$currPos);
        }
        s1 = s2;
        if (s1 != peg$FAILED) {
            s2 = this.peg$parse__();
            if (s2 != peg$FAILED) {
                this.peg$reportedPos = ((Number)s0).intValue();
                s1 = peg$f40(s1);
                s0 = s1;
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s0).intValue();
            s0 = Parser.peg$c0;
        }
        --this.peg$silentFails;
        if (s0 == peg$FAILED) {
            s1 = peg$FAILED;
            this.peg$mayBeFail(Parser.peg$c43);
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parseliteral() {
        Object s0, s1, s2, s3;

        ++this.peg$silentFails;
        s0 = this.peg$currPos;
        s1 = this.peg$parsedoubleQuotedString();
        if (s1 == peg$FAILED) {
            s1 = this.peg$parsesingleQuotedString();
        }
        if (s1 != peg$FAILED) {
            if (this.test((char)105/* "i" */)) {
                s2 = Parser.peg$c47;
                ++this.peg$currPos;
            } else {
                s2 = peg$FAILED;
                this.peg$mayBeFail(Parser.peg$c48);
            }
            if (s2 == peg$FAILED) {
                s2 = Parser.peg$c1;
            }
            if (s2 != peg$FAILED) {
                s3 = this.peg$parse__();
                if (s3 != peg$FAILED) {
                    this.peg$reportedPos = ((Number)s0).intValue();
                    s1 = peg$f41(s1, s2);
                    s0 = s1;
                } else {
                    this.peg$currPos = ((Number)s0).intValue();
                    s0 = Parser.peg$c0;
                }
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s0).intValue();
            s0 = Parser.peg$c0;
        }
        --this.peg$silentFails;
        if (s0 == peg$FAILED) {
            s1 = peg$FAILED;
            this.peg$mayBeFail(Parser.peg$c46);
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parsestring() {
        Object s0, s1, s2;

        ++this.peg$silentFails;
        s0 = this.peg$currPos;
        s1 = this.peg$parsedoubleQuotedString();
        if (s1 == peg$FAILED) {
            s1 = this.peg$parsesingleQuotedString();
        }
        if (s1 != peg$FAILED) {
            s2 = this.peg$parse__();
            if (s2 != peg$FAILED) {
                this.peg$reportedPos = ((Number)s0).intValue();
                s1 = peg$f42(s1);
                s0 = s1;
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s0).intValue();
            s0 = Parser.peg$c0;
        }
        --this.peg$silentFails;
        if (s0 == peg$FAILED) {
            s1 = peg$FAILED;
            this.peg$mayBeFail(Parser.peg$c49);
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parsedoubleQuotedString() {
        Object s0, s1, s2, s3;

        s0 = this.peg$currPos;
        if (this.test((char)34/* "\"" */)) {
            s1 = Parser.peg$c50;
            ++this.peg$currPos;
        } else {
            s1 = peg$FAILED;
            this.peg$mayBeFail(Parser.peg$c51);
        }
        if (s1 != peg$FAILED) {
            s2 = new ArrayList();
            s3 = this.peg$parsedoubleQuotedCharacter();
            while (s3 != peg$FAILED) {
                ((List)s2).add(s3);
                s3 = this.peg$parsedoubleQuotedCharacter();
            }
            if (s2 != peg$FAILED) {
                if (this.test((char)34/* "\"" */)) {
                    s3 = Parser.peg$c50;
                    ++this.peg$currPos;
                } else {
                    s3 = peg$FAILED;
                    this.peg$mayBeFail(Parser.peg$c51);
                }
                if (s3 != peg$FAILED) {
                    this.peg$reportedPos = ((Number)s0).intValue();
                    s1 = peg$f43(s2);
                    s0 = s1;
                } else {
                    this.peg$currPos = ((Number)s0).intValue();
                    s0 = Parser.peg$c0;
                }
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s0).intValue();
            s0 = Parser.peg$c0;
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parsedoubleQuotedCharacter() {
        Object s0;

        s0 = this.peg$parsesimpleDoubleQuotedCharacter();
        if (s0 == peg$FAILED) {
            s0 = this.peg$parsesimpleEscapeSequence();
            if (s0 == peg$FAILED) {
                s0 = this.peg$parsezeroEscapeSequence();
                if (s0 == peg$FAILED) {
                    s0 = this.peg$parsehexEscapeSequence();
                    if (s0 == peg$FAILED) {
                        s0 = this.peg$parseunicodeEscapeSequence();
                        if (s0 == peg$FAILED) {
                            s0 = this.peg$parseeolEscapeSequence();
                        }
                    }
                }
            }
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parsesimpleDoubleQuotedCharacter() {
        Object s0, s1, s2;

        s0 = this.peg$currPos;
        s1 = this.peg$currPos;
        ++this.peg$silentFails;
        if (this.test((char)34/* "\"" */)) {
            s2 = Parser.peg$c50;
            ++this.peg$currPos;
        } else {
            s2 = peg$FAILED;
            this.peg$mayBeFail(Parser.peg$c51);
        }
        if (s2 == peg$FAILED) {
            if (this.test((char)92/* "\\" */)) {
                s2 = Parser.peg$c52;
                ++this.peg$currPos;
            } else {
                s2 = peg$FAILED;
                this.peg$mayBeFail(Parser.peg$c53);
            }
            if (s2 == peg$FAILED) {
                s2 = this.peg$parseeolChar();
            }
        }
        --this.peg$silentFails;
        if (s2 == peg$FAILED) {
            s1 = Parser.peg$c3;
        } else {
            this.peg$currPos = ((Number)s1).intValue();
            s1 = Parser.peg$c0;
        }
        if (s1 != peg$FAILED) {
            if (this.input.length() > this.peg$currPos) {
                s2 = this.input.charAt(this.peg$currPos);
                ++this.peg$currPos;
            } else {
                s2 = peg$FAILED;
                this.peg$mayBeFail(Parser.peg$c54);
            }
            if (s2 != peg$FAILED) {
                this.peg$reportedPos = ((Number)s0).intValue();
                s1 = peg$f44(s2);
                s0 = s1;
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s0).intValue();
            s0 = Parser.peg$c0;
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parsesingleQuotedString() {
        Object s0, s1, s2, s3;

        s0 = this.peg$currPos;
        if (this.test((char)39/* "'" */)) {
            s1 = Parser.peg$c55;
            ++this.peg$currPos;
        } else {
            s1 = peg$FAILED;
            this.peg$mayBeFail(Parser.peg$c56);
        }
        if (s1 != peg$FAILED) {
            s2 = new ArrayList();
            s3 = this.peg$parsesingleQuotedCharacter();
            while (s3 != peg$FAILED) {
                ((List)s2).add(s3);
                s3 = this.peg$parsesingleQuotedCharacter();
            }
            if (s2 != peg$FAILED) {
                if (this.test((char)39/* "'" */)) {
                    s3 = Parser.peg$c55;
                    ++this.peg$currPos;
                } else {
                    s3 = peg$FAILED;
                    this.peg$mayBeFail(Parser.peg$c56);
                }
                if (s3 != peg$FAILED) {
                    this.peg$reportedPos = ((Number)s0).intValue();
                    s1 = peg$f43(s2);
                    s0 = s1;
                } else {
                    this.peg$currPos = ((Number)s0).intValue();
                    s0 = Parser.peg$c0;
                }
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s0).intValue();
            s0 = Parser.peg$c0;
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parsesingleQuotedCharacter() {
        Object s0;

        s0 = this.peg$parsesimpleSingleQuotedCharacter();
        if (s0 == peg$FAILED) {
            s0 = this.peg$parsesimpleEscapeSequence();
            if (s0 == peg$FAILED) {
                s0 = this.peg$parsezeroEscapeSequence();
                if (s0 == peg$FAILED) {
                    s0 = this.peg$parsehexEscapeSequence();
                    if (s0 == peg$FAILED) {
                        s0 = this.peg$parseunicodeEscapeSequence();
                        if (s0 == peg$FAILED) {
                            s0 = this.peg$parseeolEscapeSequence();
                        }
                    }
                }
            }
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parsesimpleSingleQuotedCharacter() {
        Object s0, s1, s2;

        s0 = this.peg$currPos;
        s1 = this.peg$currPos;
        ++this.peg$silentFails;
        if (this.test((char)39/* "'" */)) {
            s2 = Parser.peg$c55;
            ++this.peg$currPos;
        } else {
            s2 = peg$FAILED;
            this.peg$mayBeFail(Parser.peg$c56);
        }
        if (s2 == peg$FAILED) {
            if (this.test((char)92/* "\\" */)) {
                s2 = Parser.peg$c52;
                ++this.peg$currPos;
            } else {
                s2 = peg$FAILED;
                this.peg$mayBeFail(Parser.peg$c53);
            }
            if (s2 == peg$FAILED) {
                s2 = this.peg$parseeolChar();
            }
        }
        --this.peg$silentFails;
        if (s2 == peg$FAILED) {
            s1 = Parser.peg$c3;
        } else {
            this.peg$currPos = ((Number)s1).intValue();
            s1 = Parser.peg$c0;
        }
        if (s1 != peg$FAILED) {
            if (this.input.length() > this.peg$currPos) {
                s2 = this.input.charAt(this.peg$currPos);
                ++this.peg$currPos;
            } else {
                s2 = peg$FAILED;
                this.peg$mayBeFail(Parser.peg$c54);
            }
            if (s2 != peg$FAILED) {
                this.peg$reportedPos = ((Number)s0).intValue();
                s1 = peg$f44(s2);
                s0 = s1;
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s0).intValue();
            s0 = Parser.peg$c0;
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parseclass() {
        Object s0, s1, s2, s3, s4, s5, s6;

        ++this.peg$silentFails;
        s0 = this.peg$currPos;
        if (this.test((char)91/* "[" */)) {
            s1 = Parser.peg$c58;
            ++this.peg$currPos;
        } else {
            s1 = peg$FAILED;
            this.peg$mayBeFail(Parser.peg$c59);
        }
        if (s1 != peg$FAILED) {
            if (this.test((char)94/* "^" */)) {
                s2 = Parser.peg$c60;
                ++this.peg$currPos;
            } else {
                s2 = peg$FAILED;
                this.peg$mayBeFail(Parser.peg$c61);
            }
            if (s2 == peg$FAILED) {
                s2 = Parser.peg$c1;
            }
            if (s2 != peg$FAILED) {
                s3 = new ArrayList();
                s4 = this.peg$parseclassCharacterRange();
                if (s4 == peg$FAILED) {
                    s4 = this.peg$parseclassCharacter();
                }
                while (s4 != peg$FAILED) {
                    ((List)s3).add(s4);
                    s4 = this.peg$parseclassCharacterRange();
                    if (s4 == peg$FAILED) {
                        s4 = this.peg$parseclassCharacter();
                    }
                }
                if (s3 != peg$FAILED) {
                    if (this.test((char)93/* "]" */)) {
                        s4 = Parser.peg$c62;
                        ++this.peg$currPos;
                    } else {
                        s4 = peg$FAILED;
                        this.peg$mayBeFail(Parser.peg$c63);
                    }
                    if (s4 != peg$FAILED) {
                        if (this.test((char)105/* "i" */)) {
                            s5 = Parser.peg$c47;
                            ++this.peg$currPos;
                        } else {
                            s5 = peg$FAILED;
                            this.peg$mayBeFail(Parser.peg$c48);
                        }
                        if (s5 == peg$FAILED) {
                            s5 = Parser.peg$c1;
                        }
                        if (s5 != peg$FAILED) {
                            s6 = this.peg$parse__();
                            if (s6 != peg$FAILED) {
                                this.peg$reportedPos = ((Number)s0).intValue();
                                s1 = peg$f45(s2, s3, s5);
                                s0 = s1;
                            } else {
                                this.peg$currPos = ((Number)s0).intValue();
                                s0 = Parser.peg$c0;
                            }
                        } else {
                            this.peg$currPos = ((Number)s0).intValue();
                            s0 = Parser.peg$c0;
                        }
                    } else {
                        this.peg$currPos = ((Number)s0).intValue();
                        s0 = Parser.peg$c0;
                    }
                } else {
                    this.peg$currPos = ((Number)s0).intValue();
                    s0 = Parser.peg$c0;
                }
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s0).intValue();
            s0 = Parser.peg$c0;
        }
        --this.peg$silentFails;
        if (s0 == peg$FAILED) {
            s1 = peg$FAILED;
            this.peg$mayBeFail(Parser.peg$c57);
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parseclassCharacterRange() {
        Object s0, s1, s2, s3;

        s0 = this.peg$currPos;
        s1 = this.peg$parseclassCharacter();
        if (s1 != peg$FAILED) {
            if (this.test((char)45/* "-" */)) {
                s2 = Parser.peg$c64;
                ++this.peg$currPos;
            } else {
                s2 = peg$FAILED;
                this.peg$mayBeFail(Parser.peg$c65);
            }
            if (s2 != peg$FAILED) {
                s3 = this.peg$parseclassCharacter();
                if (s3 != peg$FAILED) {
                    this.peg$reportedPos = ((Number)s0).intValue();
                    s1 = peg$f46(s1, s3);
                    s0 = s1;
                } else {
                    this.peg$currPos = ((Number)s0).intValue();
                    s0 = Parser.peg$c0;
                }
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s0).intValue();
            s0 = Parser.peg$c0;
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parseclassCharacter() {
        Object s0, s1;

        s0 = this.peg$currPos;
        s1 = this.peg$parsebracketDelimitedCharacter();
        if (s1 != peg$FAILED) {
            this.peg$reportedPos = ((Number)s0).intValue();
            s1 = peg$f47(s1);
        }
        s0 = s1;

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parsebracketDelimitedCharacter() {
        Object s0;

        s0 = this.peg$parsesimpleBracketDelimitedCharacter();
        if (s0 == peg$FAILED) {
            s0 = this.peg$parsesimpleEscapeSequence();
            if (s0 == peg$FAILED) {
                s0 = this.peg$parsezeroEscapeSequence();
                if (s0 == peg$FAILED) {
                    s0 = this.peg$parsehexEscapeSequence();
                    if (s0 == peg$FAILED) {
                        s0 = this.peg$parseunicodeEscapeSequence();
                        if (s0 == peg$FAILED) {
                            s0 = this.peg$parseeolEscapeSequence();
                        }
                    }
                }
            }
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parsesimpleBracketDelimitedCharacter() {
        Object s0, s1, s2;

        s0 = this.peg$currPos;
        s1 = this.peg$currPos;
        ++this.peg$silentFails;
        if (this.test((char)93/* "]" */)) {
            s2 = Parser.peg$c62;
            ++this.peg$currPos;
        } else {
            s2 = peg$FAILED;
            this.peg$mayBeFail(Parser.peg$c63);
        }
        if (s2 == peg$FAILED) {
            if (this.test((char)92/* "\\" */)) {
                s2 = Parser.peg$c52;
                ++this.peg$currPos;
            } else {
                s2 = peg$FAILED;
                this.peg$mayBeFail(Parser.peg$c53);
            }
            if (s2 == peg$FAILED) {
                s2 = this.peg$parseeolChar();
            }
        }
        --this.peg$silentFails;
        if (s2 == peg$FAILED) {
            s1 = Parser.peg$c3;
        } else {
            this.peg$currPos = ((Number)s1).intValue();
            s1 = Parser.peg$c0;
        }
        if (s1 != peg$FAILED) {
            if (this.input.length() > this.peg$currPos) {
                s2 = this.input.charAt(this.peg$currPos);
                ++this.peg$currPos;
            } else {
                s2 = peg$FAILED;
                this.peg$mayBeFail(Parser.peg$c54);
            }
            if (s2 != peg$FAILED) {
                this.peg$reportedPos = ((Number)s0).intValue();
                s1 = peg$f44(s2);
                s0 = s1;
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s0).intValue();
            s0 = Parser.peg$c0;
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parsesimpleEscapeSequence() {
        Object s0, s1, s2, s3;

        s0 = this.peg$currPos;
        if (this.test((char)92/* "\\" */)) {
            s1 = Parser.peg$c52;
            ++this.peg$currPos;
        } else {
            s1 = peg$FAILED;
            this.peg$mayBeFail(Parser.peg$c53);
        }
        if (s1 != peg$FAILED) {
            s2 = this.peg$currPos;
            ++this.peg$silentFails;
            s3 = this.peg$parsedigit();
            if (s3 == peg$FAILED) {
                if (this.test((char)120/* "x" */)) {
                    s3 = Parser.peg$c66;
                    ++this.peg$currPos;
                } else {
                    s3 = peg$FAILED;
                    this.peg$mayBeFail(Parser.peg$c67);
                }
                if (s3 == peg$FAILED) {
                    if (this.test((char)117/* "u" */)) {
                        s3 = Parser.peg$c68;
                        ++this.peg$currPos;
                    } else {
                        s3 = peg$FAILED;
                        this.peg$mayBeFail(Parser.peg$c69);
                    }
                    if (s3 == peg$FAILED) {
                        s3 = this.peg$parseeolChar();
                    }
                }
            }
            --this.peg$silentFails;
            if (s3 == peg$FAILED) {
                s2 = Parser.peg$c3;
            } else {
                this.peg$currPos = ((Number)s2).intValue();
                s2 = Parser.peg$c0;
            }
            if (s2 != peg$FAILED) {
                if (this.input.length() > this.peg$currPos) {
                    s3 = this.input.charAt(this.peg$currPos);
                    ++this.peg$currPos;
                } else {
                    s3 = peg$FAILED;
                    this.peg$mayBeFail(Parser.peg$c54);
                }
                if (s3 != peg$FAILED) {
                    this.peg$reportedPos = ((Number)s0).intValue();
                    s1 = peg$f48(s3);
                    s0 = s1;
                } else {
                    this.peg$currPos = ((Number)s0).intValue();
                    s0 = Parser.peg$c0;
                }
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s0).intValue();
            s0 = Parser.peg$c0;
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parsezeroEscapeSequence() {
        Object s0, s1, s2, s3;

        s0 = this.peg$currPos;
        if (this.test(Parser.peg$c70)) {
            s1 = Parser.peg$c70;
            this.peg$currPos += 2;
        } else {
            s1 = peg$FAILED;
            this.peg$mayBeFail(Parser.peg$c71);
        }
        if (s1 != peg$FAILED) {
            s2 = this.peg$currPos;
            ++this.peg$silentFails;
            s3 = this.peg$parsedigit();
            --this.peg$silentFails;
            if (s3 == peg$FAILED) {
                s2 = Parser.peg$c3;
            } else {
                this.peg$currPos = ((Number)s2).intValue();
                s2 = Parser.peg$c0;
            }
            if (s2 != peg$FAILED) {
                this.peg$reportedPos = ((Number)s0).intValue();
                s1 = peg$f49();
                s0 = s1;
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s0).intValue();
            s0 = Parser.peg$c0;
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parsehexEscapeSequence() {
        Object s0, s1, s2, s3, s4, s5;

        s0 = this.peg$currPos;
        if (this.test(Parser.peg$c72)) {
            s1 = Parser.peg$c72;
            this.peg$currPos += 2;
        } else {
            s1 = peg$FAILED;
            this.peg$mayBeFail(Parser.peg$c73);
        }
        if (s1 != peg$FAILED) {
            s2 = this.peg$currPos;
            s3 = this.peg$currPos;
            s4 = this.peg$parsehexDigit();
            if (s4 != peg$FAILED) {
                s5 = this.peg$parsehexDigit();
                if (s5 != peg$FAILED) {
                    s4 = Arrays.asList(s4, s5);
                    s3 = s4;
                } else {
                    this.peg$currPos = ((Number)s3).intValue();
                    s3 = Parser.peg$c0;
                }
            } else {
                this.peg$currPos = ((Number)s3).intValue();
                s3 = Parser.peg$c0;
            }
            if (s3 != peg$FAILED) {
                s3 = this.input.subSequence(((Number)s2).intValue(), this.peg$currPos);
            }
            s2 = s3;
            if (s2 != peg$FAILED) {
                this.peg$reportedPos = ((Number)s0).intValue();
                s1 = peg$f50(s2);
                s0 = s1;
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s0).intValue();
            s0 = Parser.peg$c0;
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parseunicodeEscapeSequence() {
        Object s0, s1, s2, s3, s4, s5, s6, s7;

        s0 = this.peg$currPos;
        if (this.test(Parser.peg$c74)) {
            s1 = Parser.peg$c74;
            this.peg$currPos += 2;
        } else {
            s1 = peg$FAILED;
            this.peg$mayBeFail(Parser.peg$c75);
        }
        if (s1 != peg$FAILED) {
            s2 = this.peg$currPos;
            s3 = this.peg$currPos;
            s4 = this.peg$parsehexDigit();
            if (s4 != peg$FAILED) {
                s5 = this.peg$parsehexDigit();
                if (s5 != peg$FAILED) {
                    s6 = this.peg$parsehexDigit();
                    if (s6 != peg$FAILED) {
                        s7 = this.peg$parsehexDigit();
                        if (s7 != peg$FAILED) {
                            s4 = Arrays.asList(s4, s5, s6, s7);
                            s3 = s4;
                        } else {
                            this.peg$currPos = ((Number)s3).intValue();
                            s3 = Parser.peg$c0;
                        }
                    } else {
                        this.peg$currPos = ((Number)s3).intValue();
                        s3 = Parser.peg$c0;
                    }
                } else {
                    this.peg$currPos = ((Number)s3).intValue();
                    s3 = Parser.peg$c0;
                }
            } else {
                this.peg$currPos = ((Number)s3).intValue();
                s3 = Parser.peg$c0;
            }
            if (s3 != peg$FAILED) {
                s3 = this.input.subSequence(((Number)s2).intValue(), this.peg$currPos);
            }
            s2 = s3;
            if (s2 != peg$FAILED) {
                this.peg$reportedPos = ((Number)s0).intValue();
                s1 = peg$f50(s2);
                s0 = s1;
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s0).intValue();
            s0 = Parser.peg$c0;
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parseeolEscapeSequence() {
        Object s0, s1, s2;

        s0 = this.peg$currPos;
        if (this.test((char)92/* "\\" */)) {
            s1 = Parser.peg$c52;
            ++this.peg$currPos;
        } else {
            s1 = peg$FAILED;
            this.peg$mayBeFail(Parser.peg$c53);
        }
        if (s1 != peg$FAILED) {
            s2 = this.peg$parseeol();
            if (s2 != peg$FAILED) {
                this.peg$reportedPos = ((Number)s0).intValue();
                s1 = peg$f51(s2);
                s0 = s1;
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s0).intValue();
            s0 = Parser.peg$c0;
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parsedigit() {
        Object s0;

        if (this.test(Parser.peg$c76)) {
            s0 = this.input.charAt(this.peg$currPos);
            ++this.peg$currPos;
        } else {
            s0 = peg$FAILED;
            this.peg$mayBeFail(Parser.peg$c77);
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parsehexDigit() {
        Object s0;

        if (this.test(Parser.peg$c78)) {
            s0 = this.input.charAt(this.peg$currPos);
            ++this.peg$currPos;
        } else {
            s0 = peg$FAILED;
            this.peg$mayBeFail(Parser.peg$c79);
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parseletter() {
        Object s0;

        s0 = this.peg$parselowerCaseLetter();
        if (s0 == peg$FAILED) {
            s0 = this.peg$parseupperCaseLetter();
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parselowerCaseLetter() {
        Object s0;

        if (this.test(Parser.peg$c80)) {
            s0 = this.input.charAt(this.peg$currPos);
            ++this.peg$currPos;
        } else {
            s0 = peg$FAILED;
            this.peg$mayBeFail(Parser.peg$c81);
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parseupperCaseLetter() {
        Object s0;

        if (this.test(Parser.peg$c82)) {
            s0 = this.input.charAt(this.peg$currPos);
            ++this.peg$currPos;
        } else {
            s0 = peg$FAILED;
            this.peg$mayBeFail(Parser.peg$c83);
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parse__() {
        Object s0, s1;

        s0 = new ArrayList();
        s1 = this.peg$parsewhitespace();
        if (s1 == peg$FAILED) {
            s1 = this.peg$parseeol();
            if (s1 == peg$FAILED) {
                s1 = this.peg$parsecomment();
            }
        }
        while (s1 != peg$FAILED) {
            ((List)s0).add(s1);
            s1 = this.peg$parsewhitespace();
            if (s1 == peg$FAILED) {
                s1 = this.peg$parseeol();
                if (s1 == peg$FAILED) {
                    s1 = this.peg$parsecomment();
                }
            }
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parsecomment() {
        Object s0, s1;

        ++this.peg$silentFails;
        s0 = this.peg$parsesingleLineComment();
        if (s0 == peg$FAILED) {
            s0 = this.peg$parsemultiLineComment();
        }
        --this.peg$silentFails;
        if (s0 == peg$FAILED) {
            s1 = peg$FAILED;
            this.peg$mayBeFail(Parser.peg$c84);
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parsesingleLineComment() {
        Object s0, s1, s2, s3, s4, s5;

        s0 = this.peg$currPos;
        if (this.test(Parser.peg$c85)) {
            s1 = Parser.peg$c85;
            this.peg$currPos += 2;
        } else {
            s1 = peg$FAILED;
            this.peg$mayBeFail(Parser.peg$c86);
        }
        if (s1 != peg$FAILED) {
            s2 = new ArrayList();
            s3 = this.peg$currPos;
            s4 = this.peg$currPos;
            ++this.peg$silentFails;
            s5 = this.peg$parseeolChar();
            --this.peg$silentFails;
            if (s5 == peg$FAILED) {
                s4 = Parser.peg$c3;
            } else {
                this.peg$currPos = ((Number)s4).intValue();
                s4 = Parser.peg$c0;
            }
            if (s4 != peg$FAILED) {
                if (this.input.length() > this.peg$currPos) {
                    s5 = this.input.charAt(this.peg$currPos);
                    ++this.peg$currPos;
                } else {
                    s5 = peg$FAILED;
                    this.peg$mayBeFail(Parser.peg$c54);
                }
                if (s5 != peg$FAILED) {
                    s4 = Arrays.asList(s4, s5);
                    s3 = s4;
                } else {
                    this.peg$currPos = ((Number)s3).intValue();
                    s3 = Parser.peg$c0;
                }
            } else {
                this.peg$currPos = ((Number)s3).intValue();
                s3 = Parser.peg$c0;
            }
            while (s3 != peg$FAILED) {
                ((List)s2).add(s3);
                s3 = this.peg$currPos;
                s4 = this.peg$currPos;
                ++this.peg$silentFails;
                s5 = this.peg$parseeolChar();
                --this.peg$silentFails;
                if (s5 == peg$FAILED) {
                    s4 = Parser.peg$c3;
                } else {
                    this.peg$currPos = ((Number)s4).intValue();
                    s4 = Parser.peg$c0;
                }
                if (s4 != peg$FAILED) {
                    if (this.input.length() > this.peg$currPos) {
                        s5 = this.input.charAt(this.peg$currPos);
                        ++this.peg$currPos;
                    } else {
                        s5 = peg$FAILED;
                        this.peg$mayBeFail(Parser.peg$c54);
                    }
                    if (s5 != peg$FAILED) {
                        s4 = Arrays.asList(s4, s5);
                        s3 = s4;
                    } else {
                        this.peg$currPos = ((Number)s3).intValue();
                        s3 = Parser.peg$c0;
                    }
                } else {
                    this.peg$currPos = ((Number)s3).intValue();
                    s3 = Parser.peg$c0;
                }
            }
            if (s2 != peg$FAILED) {
                s1 = Arrays.asList(s1, s2);
                s0 = s1;
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s0).intValue();
            s0 = Parser.peg$c0;
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parsemultiLineComment() {
        Object s0, s1, s2, s3, s4, s5;

        s0 = this.peg$currPos;
        if (this.test(Parser.peg$c87)) {
            s1 = Parser.peg$c87;
            this.peg$currPos += 2;
        } else {
            s1 = peg$FAILED;
            this.peg$mayBeFail(Parser.peg$c88);
        }
        if (s1 != peg$FAILED) {
            s2 = new ArrayList();
            s3 = this.peg$currPos;
            s4 = this.peg$currPos;
            ++this.peg$silentFails;
            if (this.test(Parser.peg$c89)) {
                s5 = Parser.peg$c89;
                this.peg$currPos += 2;
            } else {
                s5 = peg$FAILED;
                this.peg$mayBeFail(Parser.peg$c90);
            }
            --this.peg$silentFails;
            if (s5 == peg$FAILED) {
                s4 = Parser.peg$c3;
            } else {
                this.peg$currPos = ((Number)s4).intValue();
                s4 = Parser.peg$c0;
            }
            if (s4 != peg$FAILED) {
                if (this.input.length() > this.peg$currPos) {
                    s5 = this.input.charAt(this.peg$currPos);
                    ++this.peg$currPos;
                } else {
                    s5 = peg$FAILED;
                    this.peg$mayBeFail(Parser.peg$c54);
                }
                if (s5 != peg$FAILED) {
                    s4 = Arrays.asList(s4, s5);
                    s3 = s4;
                } else {
                    this.peg$currPos = ((Number)s3).intValue();
                    s3 = Parser.peg$c0;
                }
            } else {
                this.peg$currPos = ((Number)s3).intValue();
                s3 = Parser.peg$c0;
            }
            while (s3 != peg$FAILED) {
                ((List)s2).add(s3);
                s3 = this.peg$currPos;
                s4 = this.peg$currPos;
                ++this.peg$silentFails;
                if (this.test(Parser.peg$c89)) {
                    s5 = Parser.peg$c89;
                    this.peg$currPos += 2;
                } else {
                    s5 = peg$FAILED;
                    this.peg$mayBeFail(Parser.peg$c90);
                }
                --this.peg$silentFails;
                if (s5 == peg$FAILED) {
                    s4 = Parser.peg$c3;
                } else {
                    this.peg$currPos = ((Number)s4).intValue();
                    s4 = Parser.peg$c0;
                }
                if (s4 != peg$FAILED) {
                    if (this.input.length() > this.peg$currPos) {
                        s5 = this.input.charAt(this.peg$currPos);
                        ++this.peg$currPos;
                    } else {
                        s5 = peg$FAILED;
                        this.peg$mayBeFail(Parser.peg$c54);
                    }
                    if (s5 != peg$FAILED) {
                        s4 = Arrays.asList(s4, s5);
                        s3 = s4;
                    } else {
                        this.peg$currPos = ((Number)s3).intValue();
                        s3 = Parser.peg$c0;
                    }
                } else {
                    this.peg$currPos = ((Number)s3).intValue();
                    s3 = Parser.peg$c0;
                }
            }
            if (s2 != peg$FAILED) {
                if (this.test(Parser.peg$c89)) {
                    s3 = Parser.peg$c89;
                    this.peg$currPos += 2;
                } else {
                    s3 = peg$FAILED;
                    this.peg$mayBeFail(Parser.peg$c90);
                }
                if (s3 != peg$FAILED) {
                    s1 = Arrays.asList(s1, s2, s3);
                    s0 = s1;
                } else {
                    this.peg$currPos = ((Number)s0).intValue();
                    s0 = Parser.peg$c0;
                }
            } else {
                this.peg$currPos = ((Number)s0).intValue();
                s0 = Parser.peg$c0;
            }
        } else {
            this.peg$currPos = ((Number)s0).intValue();
            s0 = Parser.peg$c0;
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parseeol() {
        Object s0, s1;

        ++this.peg$silentFails;
        if (this.test((char)10/* "\n" */)) {
            s0 = Parser.peg$c92;
            ++this.peg$currPos;
        } else {
            s0 = peg$FAILED;
            this.peg$mayBeFail(Parser.peg$c93);
        }
        if (s0 == peg$FAILED) {
            if (this.test(Parser.peg$c94)) {
                s0 = Parser.peg$c94;
                this.peg$currPos += 2;
            } else {
                s0 = peg$FAILED;
                this.peg$mayBeFail(Parser.peg$c95);
            }
            if (s0 == peg$FAILED) {
                if (this.test((char)13/* "\r" */)) {
                    s0 = Parser.peg$c96;
                    ++this.peg$currPos;
                } else {
                    s0 = peg$FAILED;
                    this.peg$mayBeFail(Parser.peg$c97);
                }
                if (s0 == peg$FAILED) {
                    if (this.test((char)8232/* "\u2028" */)) {
                        s0 = Parser.peg$c98;
                        ++this.peg$currPos;
                    } else {
                        s0 = peg$FAILED;
                        this.peg$mayBeFail(Parser.peg$c99);
                    }
                    if (s0 == peg$FAILED) {
                        if (this.test((char)8233/* "\u2029" */)) {
                            s0 = Parser.peg$c100;
                            ++this.peg$currPos;
                        } else {
                            s0 = peg$FAILED;
                            this.peg$mayBeFail(Parser.peg$c101);
                        }
                    }
                }
            }
        }
        --this.peg$silentFails;
        if (s0 == peg$FAILED) {
            s1 = peg$FAILED;
            this.peg$mayBeFail(Parser.peg$c91);
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parseeolChar() {
        Object s0;

        if (this.test(Parser.peg$c102)) {
            s0 = this.input.charAt(this.peg$currPos);
            ++this.peg$currPos;
        } else {
            s0 = peg$FAILED;
            this.peg$mayBeFail(Parser.peg$c103);
        }

        return s0;
    }
    @Rule
    @SuppressWarnings("unused")
    private Object peg$parsewhitespace() {
        Object s0, s1;

        ++this.peg$silentFails;
        if (this.test(Parser.peg$c105)) {
            s0 = this.input.charAt(this.peg$currPos);
            ++this.peg$currPos;
        } else {
            s0 = peg$FAILED;
            this.peg$mayBeFail(Parser.peg$c106);
        }
        --this.peg$silentFails;
        if (s0 == peg$FAILED) {
            s1 = peg$FAILED;
            this.peg$mayBeFail(Parser.peg$c104);
        }

        return s0;
    }
    //</editor-fold>
}